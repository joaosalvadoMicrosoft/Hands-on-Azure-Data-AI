{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "ADPAdminUserName": {
            "defaultValue": "adpadmin",
            "type": "String",
            "metadata": {
                "description": "Admin user name to connect to all services during the workshop."
            }
        },
        "ADPAdminPassword": {
            "defaultValue": "P@ssw0rd123!",
            "type": "String",
            "metadata": {
                "description": "Admin password used to connect to all services during the workshop."
            }
        }
    },
    "variables": {
        "ADPAdminUserName": "adpadmin",
        "ADPAdminPassword": "P@ssw0rd123!",
        "UniqueSuffix": "[uniqueString(resourceGroup().id)]",
        "ADPDataLakeStorageName": "[concat('syndtlake', variables('UniqueSuffix'))]",
        "ADPOperationalSQLEndpoint": "[concat('operationalsql-', variables('UniqueSuffix'))]",
        "ADPDatabricksWorkspaceName": "[concat('ADPDatabricks-',variables('UniqueSuffix'))]",
        "ADPDatabricksResourceGroupName": "[concat('Databricks-', resourceGroup().name)]",
        "ADPDatabricksResourceGroupID": "[concat(subscription().id, '/resourceGroups/', variables('ADPDatabricksResourceGroupName'))]",
        "ADPDatabricksTier": "standard",
        "ADPComputerVisionName": "ADPComputerVision",
        "ADPComputerVisionSKU": "S1",
        "ADPEventHubsName": "[concat('ADPEventHubs-', variables('UniqueSuffix'))]",
        "ADPEventHubsSKU": "Standard",
        "ADPEventHubsThroughputUnits": 1,
        "ADPStreamAnalyticsName": "[concat('SynapseStreamAnalytics-',variables('UniqueSuffix'))]",
        "ADPStreamAnalyticsSKU": "Standard",
        "ADPKeyVaultName": "[concat('ADPKeyVault-',variables('UniqueSuffix'))]",
        "ADPLogicAppName": "ADPLogicApp",
        "ADPCosmosDBAccountName": "[concat('adpcosmosdb-', variables('UniqueSuffix'))]",
        "ADPEventHubConnectionName": "EventHubAPIConnection",
        "ADPEventHubAuthPolicyID": "[resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('ADPEventHubsName'), 'RootManageSharedAccessKey')]",
        "ADPEventHubsAPIVersion": "[providers('Microsoft.Eventhub','namespaces').apiVersions[0]]",
        "ADPIntegrationAccountName": "ADPIntegrationAccount",
        "location": "[resourceGroup().location]",
        "sqlAdministratorLogin": "[variables('ADPAdminUserName')]",
        "sqlAdministratorLoginPassword": "[variables('ADPAdminPassword')]",
        "workspaceName": "[concat('asaworkspace', variables('UniqueSuffix'))]",
        "adlsStorageAccountName": "[variables('ADPDataLakeStorageName')]",
        "defaultDataLakeStorageFilesystemName": "defaultfs",
        "sqlComputeName": "SynapseDW",
        "sparkComputeName": "SparkPool01",
        "computeSubnetId": "",
        "sqlServerSKU": "DW100c",
        "storageBlobDataContributorRoleID": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
        "defaultDataLakeStorageAccountUrl": "[concat('https://', variables('adlsStorageAccountName'), '.dfs.core.windows.net')]",
        "sparkAutoScaleEnabled": "true",
        "sparkMinNodeCount": "3",
        "sparkMaxNodeCount": "4",
        "sparkNodeCount": "0",
        "sparkNodeSizeFamily": "MemoryOptimized",
        "sparkNodeSize": "Small",
        "sparkAutoPauseEnabled": "true",
        "sparkAutoPauseDelayInMinutes": "15",
        "sparkVersion": "2.4",
        "packagesRequirementsFileName": "requirements.txt",
        "packagesRequirementsContent": "xgboost==1.0.2\nonnxruntime==1.0.0\nwerkzeug==0.16.1\nnimbusml==1.7.1\nruamel.yaml==0.16.9\nazureml-train-automl-runtime==1.6.0\nscikit-learn==0.20.3\nnumpy==1.16.2\npandas==0.23.4\nscipy==1.4.1\n",
        "keyVaultName": "[concat('asakeyvault', variables('UniqueSuffix'))]",
        "blobStorageAccountName": "[concat('asastore', variables('UniqueSuffix'))]",
        "applicationInsightsName": "[concat('asaappinsights', variables('UniqueSuffix'))]",
        "amlWorkspaceName": "[concat('amlworkspace', variables('UniqueSuffix'))]",
        "textsentname": "[concat('TextAnalysisSent', variables('UniqueSuffix'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('ADPDataLakeStorageName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [],
            "tags": {},
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "isHnsEnabled": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            },
            "resources": [
                {
                    "type": "blobServices/containers",
                    "apiVersion": "2018-07-01",
                    "name": "[concat('default/', variables('defaultDataLakeStorageFilesystemName'))]",
                    "dependsOn": [
                        "[concat('Microsoft.Storage/storageAccounts/', variables('adlsStorageAccountName'))]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('ADPDataLakeStorageName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('ADPDataLakeStorageName'))]"
            ],
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('ADPDataLakeStorageName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('ADPDataLakeStorageName'))]"
            ],
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('ADPDataLakeStorageName'), '/default/nycimagemetadata')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('ADPDataLakeStorageName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('ADPDataLakeStorageName'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('ADPDataLakeStorageName'), '/default/nycimages')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('ADPDataLakeStorageName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('ADPDataLakeStorageName'))]"
            ],
            "properties": {
                "publicAccess": "Blob"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('ADPDataLakeStorageName'), '/default/nyctaxidata-curated')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('ADPDataLakeStorageName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('ADPDataLakeStorageName'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('ADPDataLakeStorageName'), '/default/nyctaxidata-raw')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('ADPDataLakeStorageName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('ADPDataLakeStorageName'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('ADPDataLakeStorageName'), '/default/nysestocktrade')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('ADPDataLakeStorageName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('ADPDataLakeStorageName'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2015-05-01-preview",
            "name": "[variables('ADPOperationalSQLEndpoint')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [],
            "kind": "v12.0",
            "properties": {
                "administratorLogin": "[parameters('ADPAdminUserName')]",
                "administratorLoginPassword": "[parameters('ADPAdminPassword')]",
                "version": "12.0"
            },
            "resources": [
                {
                    "type": "firewallrules",
                    "apiVersion": "2015-05-01-preview",
                    "name": "AllowAllAzureIps",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[variables('ADPOperationalSQLEndpoint')]"
                    ],
                    "properties": {
                        "startIpAddress": "0.0.0.0",
                        "endIpAddress": "0.0.0.0"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Sql/servers/databases",
            "apiVersion": "2017-10-01-preview",
            "name": "[concat(variables('ADPOperationalSQLEndpoint'), '/NYCDataSets')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('ADPOperationalSQLEndpoint'))]"
            ],
            "tags": {},
            "sku": {
                "name": "Standard",
                "tier": "Standard",
                "capacity": 20
            },
            "kind": "v12.0,user",
            "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "maxSizeBytes": 1073741824,
                "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
                "zoneRedundant": false,
                "readScale": "Disabled",
                "readReplicaCount": 0
            },
            "resources": [
                {
                    "type": "extensions",
                    "apiVersion": "2014-04-01",
                    "name": "Import",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers/databases', variables('ADPOperationalSQLEndpoint'), 'NYCDataSets')]"
                    ],
                    "properties": {
                        "storageKeyType": "SharedAccessKey",
                        "storageKey": "?sv=2018-03-28&ss=b&srt=sco&sp=rwl&se=2050-12-30T17:25:52Z&st=2019-04-05T09:25:52Z&spr=https&sig=4qrD8NmhaSmRFu2gKja67ayohfIDEQH3LdVMa2Utykc%3D",
                        "storageUri": "https://mdwresources.blob.core.windows.net/nycdatasets/NYCDataSets.bacpac",
                        "administratorLogin": "[parameters('ADPAdminUserName')]",
                        "administratorLoginPassword": "[parameters('ADPAdminPassword')]",
                        "operationMode": "Import"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Databricks/workspaces",
            "apiVersion": "2018-04-01",
            "name": "[variables('ADPDatabricksWorkspaceName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[variables('ADPDatabricksTier')]"
            },
            "properties": {
                "ManagedResourceGroupId": "[variables('ADPDatabricksResourceGroupID')]"
            }
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2016-02-01-preview",
            "name": "[variables('ADPComputerVisionName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [],
            "sku": {
                "name": "[variables('ADPComputerVisionSKU')]"
            },
            "kind": "ComputerVision",
            "properties": {}
        },
        {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2017-04-01",
            "name": "[variables('ADPEventHubsName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [],
            "tags": {},
            "sku": {
                "name": "[variables('ADPEventHubsSKU')]",
                "tier": "[variables('ADPEventHubsSKU')]",
                "capacity": "[variables('ADPEventHubsThroughputUnits')]"
            },
            "properties": {
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
            },
            "resources": [
                {
                    "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
                    "apiVersion": "2017-04-01",
                    "name": "[concat(variables('ADPEventHubsName'), '/RootManageSharedAccessKey')]",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces', variables('ADPEventHubsName'))]"
                    ],
                    "properties": {
                        "rights": [
                            "Listen",
                            "Manage",
                            "Send"
                        ]
                    }
                },
                {
                    "type": "Microsoft.EventHub/namespaces/eventhubs",
                    "apiVersion": "2017-04-01",
                    "name": "[concat(variables('ADPEventHubsName'), '/nysestocktrade')]",
                    "location": "Australia East",
                    "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces', variables('ADPEventHubsName'))]"
                    ],
                    "properties": {
                        "messageRetentionInDays": 1,
                        "partitionCount": 1,
                        "status": "Active"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.StreamAnalytics/streamingjobs",
            "apiVersion": "2017-04-01-preview",
            "name": "[variables('ADPStreamAnalyticsName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [],
            "properties": {
                "sku": {
                    "name": "[variables('ADPStreamAnalyticsSKU')]"
                },
                "eventsOutOfOrderPolicy": "Adjust",
                "outputErrorPolicy": "Stop",
                "eventsOutOfOrderMaxDelayInSeconds": 0,
                "eventsLateArrivalMaxDelayInSeconds": 5,
                "dataLocale": "en-US",
                "jobType": "Cloud",
                "inputs": [],
                "transformation": {
                    "name": "Transformation",
                    "properties": {
                        "query": "SELECT\r\n    *\r\nINTO\r\n    [YourOutputAlias]\r\nFROM\r\n    [YourInputAlias]",
                        "streamingUnits": 3
                    }
                },
                "compatibilityLevel": "1.1"
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('ADPLogicAppName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Logic/integrationAccounts', variables('ADPIntegrationAccountName'))]",
                "[resourceId('Microsoft.Web/connections', variables('ADPEventHubConnectionName'))]"
            ],
            "properties": {
                "state": "Disabled",
                "integrationAccount": {
                    "id": "[resourceId('Microsoft.Logic/integrationAccounts', variables('ADPIntegrationAccountName'))]"
                },
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Second",
                                "interval": 1
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Initialize_Config_Settings": {
                            "runAfter": {},
                            "type": "Compose",
                            "inputs": {
                                "numberOfMessages": 10,
                                "priceRangeMax": 100,
                                "priceRangeMin": 70,
                                "quantityRangeMax": 300,
                                "quantityRangeMin": 100,
                                "stockTickers": [
                                    "MSFT",
                                    "AMZN",
                                    "GOOGL",
                                    "FB",
                                    "TWTR"
                                ]
                            }
                        },
                        "Initialize_messageCount": {
                            "runAfter": {
                                "Parse_Config_Settings": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "messageCount",
                                        "type": "Integer",
                                        "value": 1
                                    }
                                ]
                            }
                        },
                        "Parse_Config_Settings": {
                            "runAfter": {
                                "Initialize_Config_Settings": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@outputs('Initialize_Config_Settings')",
                                "schema": {
                                    "properties": {
                                        "numberOfMessages": {
                                            "type": "integer"
                                        },
                                        "priceRangeMax": {
                                            "type": "integer"
                                        },
                                        "priceRangeMin": {
                                            "type": "integer"
                                        },
                                        "quantityRangeMax": {
                                            "type": "integer"
                                        },
                                        "quantityRangeMin": {
                                            "type": "integer"
                                        },
                                        "stockTickers": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Until_numberOfMessages_is_achieved": {
                            "actions": {
                                "Capture_Stock_Trade_Message": {
                                    "runAfter": {
                                        "Generate_Stock_Trade_Message": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@outputs('Generate_Stock_Trade_Message')?['body']"
                                },
                                "Generate_Stock_Trade_Message": {
                                    "runAfter": {},
                                    "type": "JavaScriptCode",
                                    "inputs": {
                                        "code": "var configSettings = workflowContext.actions.Initialize_Config_Settings.outputs;\r\n\r\nstockTickerIndex = Math.round(Math.random()*100) % configSettings.stockTickers.length;\r\n\r\nvar stockTrade = {\r\n    StockTicker: configSettings.stockTickers[stockTickerIndex]\r\n    , Quantity: Math.round(configSettings.quantityRangeMin + (configSettings.quantityRangeMax - configSettings.quantityRangeMin)*Math.random())\r\n    , Price: configSettings.priceRangeMin + (configSettings.priceRangeMax - configSettings.priceRangeMin)*Math.random()\r\n    , TradeTimestamp: new Date().toJSON()\r\n};\r\n\r\nreturn stockTrade;"
                                    }
                                },
                                "Increment_messageCount": {
                                    "runAfter": {
                                        "Send_event_to_NYSEStockTradeSimm_Event_Hub": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "IncrementVariable",
                                    "inputs": {
                                        "name": "messageCount",
                                        "value": 1
                                    }
                                },
                                "Send_event_to_NYSEStockTradeSimm_Event_Hub": {
                                    "runAfter": {
                                        "Capture_Stock_Trade_Message": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "ContentData": "@{base64(outputs('Capture_Stock_Trade_Message'))}"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['eventhubs']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/@{encodeURIComponent('nysestocktrade')}/events"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_messageCount": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@greater(variables('messageCount'), rand(1, body('Parse_Config_Settings')?['numberOfMessages']))",
                            "limit": {
                                "count": 60,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "eventhubs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections',variables('ADPEventHubConnectionName'))]",
                                "connectionName": "[variables('ADPEventHubConnectionName')]",
                                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/eventhubs')]"
                            }
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('ADPEventHubConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[variables('ADPEventHubConnectionName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId ,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/eventhubs')]"
                },
                "parameterValues": {
                    "connectionString": "[listkeys(variables('ADPEventHubAuthPolicyID'), '2017-04-01').primaryConnectionString]"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2015-04-08",
            "name": "[variables('ADPCosmosDBAccountName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [],
            "tags": {
                "defaultExperience": "Core (SQL)"
            },
            "kind": "GlobalDocumentDB",
            "properties": {
                "ipRangeFilter": "",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": true,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Session",
                    "maxIntervalInSeconds": 5,
                    "maxStalenessPrefix": 100
                },
                "locations": [
                    {
                        "locationName": "[resourceGroup().location]",
                        "provisioningState": "Succeeded",
                        "failoverPriority": 0
                    }
                ],
                "capabilities": []
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2018-02-14",
            "name": "[variables('keyVaultName')]",
            "location": "[variables('location')]",
            "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "standard",
                    "family": "A"
                },
                "accessPolicies": []
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces",
            "apiVersion": "2019-06-01-preview",
            "name": "[variables('workspaceName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('adlsStorageAccountName'), '/blobServices/default/containers/', variables('defaultDataLakeStorageFilesystemName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "defaultDataLakeStorage": {
                    "accountUrl": "[variables('defaultDataLakeStorageAccountUrl')]",
                    "filesystem": "[variables('defaultDataLakeStorageFilesystemName')]"
                },
                "virtualNetworkProfile": {
                    "computeSubnetId": "[variables('computeSubnetId')]"
                },
                "sqlAdministratorLogin": "[variables('sqlAdministratorLogin')]",
                "sqlAdministratorLoginPassword": "[variables('sqlAdministratorLoginPassword')]"
            },
            "resources": [
                {
                    "type": "firewallrules",
                    "apiVersion": "2019-06-01-preview",
                    "name": "allowAll",
                    "location": "[variables('location')]",
                    "dependsOn": [
                        "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]"
                    ],
                    "properties": {
                        "startIpAddress": "0.0.0.0",
                        "endIpAddress": "255.255.255.255"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(variables('adlsStorageAccountName'), '/default/', variables('defaultDataLakeStorageFilesystemName'), '/Microsoft.Authorization/',  guid(concat(resourceGroup().id, '/', variables('storageBlobDataContributorRoleID'), '/', variables('workspaceName'))))]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleID'))]",
                "principalId": "[reference(concat('Microsoft.Synapse/workspaces/', variables('workspaceName')), '2019-06-01-preview', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[guid(concat(resourceGroup().id, '/', variables('storageBlobDataContributorRoleID'), '/', variables('workspaceName'), '2'))]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleID'))]",
                "principalId": "[reference(concat('Microsoft.Synapse/workspaces/', variables('workspaceName')), '2019-06-01-preview', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/bigDataPools",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('workspaceName'), '/', variables('sparkComputeName'))]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]"
            ],
            "properties": {
                "nodeCount": "[variables('sparkNodeCount')]",
                "nodeSizeFamily": "[variables('sparkNodeSizeFamily')]",
                "nodeSize": "[variables('sparkNodeSize')]",
                "autoScale": {
                    "enabled": "[variables('sparkAutoScaleEnabled')]",
                    "minNodeCount": "[variables('sparkMinNodeCount')]",
                    "maxNodeCount": "[variables('sparkMaxNodeCount')]"
                },
                "autoPause": {
                    "enabled": "[variables('sparkAutoPauseEnabled')]",
                    "delayInMinutes": "[variables('sparkAutoPauseDelayInMinutes')]"
                },
                "sparkVersion": "[variables('sparkVersion')]",
                "libraryRequirements": {
                    "filename": "[variables('packagesRequirementsFileName')]",
                    "content": "[variables('packagesRequirementsContent')]"
                }
            }
        },
        {
            "type": "Microsoft.Synapse/workspaces/sqlPools",
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('workspaceName'), '/', variables('sqlComputeName'))]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]",
                "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'), '/bigDataPools/', variables('sparkComputeName'))]"
            ],
            "sku": {
                "name": "[variables('sqlServerSKU')]"
            },
            "properties": {
                "createMode": "Default",
                "collation": "SQL_Latin1_General_CP1_CI_AS"
            }
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2018-05-01-preview",
            "name": "[variables('applicationInsightsName')]",
            "location": "[if(or(equals(variables('location'),'eastus2'),equals(variables('location'),'westcentralus')),'southcentralus',variables('location'))]",
            "kind": "web",
            "properties": {
                "Application_Type": "web"
            }
        },
        {
            "type": "Microsoft.MachineLearningServices/workspaces",
            "apiVersion": "2020-03-01",
            "name": "[variables('amlWorkspaceName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            ],
            "sku": {
                "tier": "Enterprise",
                "name": "Enterprise"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "friendlyName": "[variables('amlWorkspaceName')]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults',variables('keyVaultName'))]",
                "applicationInsights": "[resourceId('Microsoft.Insights/components',variables('applicationInsightsName'))]",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts/',variables('blobStorageAccountName'))]",
                "hbiWorkspace": false,
                "allowPublicAccessWhenBehindVnet": false
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[variables('blobStorageAccountName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "encryption": {
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "supportsHttpsTrafficOnly": true
            }
        },
		{
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('blobStorageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
            ],
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        	},
			{
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('blobStorageAccountName'), '/default/polybase')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('blobStorageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        	},
            {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2017-04-18",
            "name": "[variables('textsentname')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "F0"
            },
            "kind": "TextAnalytics",
            "properties": {
                "customSubDomainName": "[variables('textsentname')]"
            }
            },
            {
            "type": "Microsoft.Logic/integrationAccounts",
            "apiVersion": "2016-06-01",
            "name": "[variables('ADPIntegrationAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Basic"
            },
            "properties": {
                "state": "Enabled"
            }
        }
    ]
}
